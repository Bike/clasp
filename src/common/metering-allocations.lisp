(defun class-allocation-counts ()
  (let ((counts (make-hash-table)))
    (maphash (lambda (k v)
	       (setf (gethash k counts) (multiple-value-list (allocation-meter v))))
	     core::*class-name-hash-table*)
    counts))

(defun calculate-delta (ht-before ht-after)
  (maphash (lambda (k v)
	     (let ((before-count (gethash k ht-before))
		   (after-count (gethash k ht-after)))
	       (setf (gethash k ht-after) (mapcar #'- after-count before-count))))
	   ht-after)
  ht-after)

(defun print-report (ht)
  (let (result)
    (maphash (lambda (k v)
	       (push (cons k v) result))
	     ht)
    (sort result #'< :key (lambda (k) (car (cdr k))))
    (dolist (v result)
      (when (> (car (cdr v)) 0)
	(bformat t "%s %s\n" (car v) (cdr v))))))

(defmacro count-class-allocations (form)
  (let ((ht-before (gensym))
	(ht-after (gensym)))
    `(funcall #'(lambda ()
		  (let ((,ht-before (class-allocation-counts)))
		    (multiple-value-prog1
		     (format t "~a~%" ,form)
		     (let ((,ht-after (class-allocation-counts)))
		       (print-report (calculate-delta ,ht-before ,ht-after)))))))))
